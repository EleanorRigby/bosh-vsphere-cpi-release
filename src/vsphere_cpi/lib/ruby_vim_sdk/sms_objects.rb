# ******* WARNING - AUTO GENERATED CODE - DO NOT EDIT *******

module VimSdk
  module VmomiSupport

    add_version("vim.version.version10", "vim25", "6.0", false, "vim25")
    add_version("vim.version.version11", "vim25", "6.5", false, "vim25")
    add_version("vmodl.query.version.version1", "", "", false, "vim25")
    add_version("sms.version.version3", "sms", "3.0", false, "sms")
    add_version("vmodl.query.version.version2", "", "", false, "vim25")
    add_version("sms.version.version4", "sms", "4.0", false, "sms")
    add_version("vmodl.query.version.version3", "", "", false, "vim25")
    add_version("sms.version.version1", "sms", "1.0", false, "sms")
    add_version("vmodl.query.version.version4", "", "", false, "vim25")
    add_version("sms.version.version2", "sms", "2.0", false, "sms")
    add_version("sms.version.version5", "sms", "5.0", false, "sms")
    add_version("sms.version.version11", "sms", "6.5", false, "sms")
    add_version("vmodl.reflect.version.version2", "reflect", "2.0", false, "reflect")
    add_version("vmodl.reflect.version.version1", "reflect", "1.0", false, "reflect")
    add_version("vim.version.legacy", "vim25", "legacy", false, "vim25")
    add_version("vim.version.version1", "vim2", "2.0", false, "vim25")
    add_version("vim.version.version2", "vim25", "2.5", false, "vim25")
    add_version("vim.version.version3", "vim25", "2.5u2", false, "vim25")
    add_version("vim.version.version4", "vim25", "2.5u2server", false, "vim25")
    add_version("vim.version.version5", "vim25", "4.0", false, "vim25")
    add_version("vim.version.version6", "vim25", "4.1", false, "vim25")
    add_version("vim.version.version7", "vim25", "5.0", false, "vim25")
    add_version("vim.version.version8", "vim25", "5.1", false, "vim25")
    add_version("vim.version.version9", "vim25", "5.5", false, "vim25")
    add_version("vmodl.version.version2", "", "", false, "vim25")
    add_version("vmodl.version.version1", "", "", false, "vim25")
    add_version("sms.version.legacy", "sms", "legacy", false, "sms")
    add_version("vmodl.version.version0", "", "", false, "vim25")
    add_version_parent("vim.version.version10", "vim.version.version10")
    add_version_parent("vim.version.version10", "vmodl.query.version.version1")
    add_version_parent("vim.version.version10", "vmodl.query.version.version2")
    add_version_parent("vim.version.version10", "vmodl.query.version.version3")
    add_version_parent("vim.version.version10", "vmodl.query.version.version4")
    add_version_parent("vim.version.version10", "vmodl.reflect.version.version2")
    add_version_parent("vim.version.version10", "vmodl.reflect.version.version1")
    add_version_parent("vim.version.version10", "vim.version.version1")
    add_version_parent("vim.version.version10", "vim.version.version2")
    add_version_parent("vim.version.version10", "vim.version.version3")
    add_version_parent("vim.version.version10", "vim.version.version4")
    add_version_parent("vim.version.version10", "vim.version.version5")
    add_version_parent("vim.version.version10", "vim.version.version6")
    add_version_parent("vim.version.version10", "vim.version.version7")
    add_version_parent("vim.version.version10", "vim.version.version8")
    add_version_parent("vim.version.version10", "vim.version.version9")
    add_version_parent("vim.version.version10", "vmodl.version.version2")
    add_version_parent("vim.version.version10", "vmodl.version.version1")
    add_version_parent("vim.version.version10", "vmodl.version.version0")
    add_version_parent("vim.version.version11", "vim.version.version10")
    add_version_parent("vim.version.version11", "vim.version.version11")
    add_version_parent("vim.version.version11", "vmodl.query.version.version1")
    add_version_parent("vim.version.version11", "vmodl.query.version.version2")
    add_version_parent("vim.version.version11", "vmodl.query.version.version3")
    add_version_parent("vim.version.version11", "vmodl.query.version.version4")
    add_version_parent("vim.version.version11", "vmodl.reflect.version.version2")
    add_version_parent("vim.version.version11", "vmodl.reflect.version.version1")
    add_version_parent("vim.version.version11", "vim.version.version1")
    add_version_parent("vim.version.version11", "vim.version.version2")
    add_version_parent("vim.version.version11", "vim.version.version3")
    add_version_parent("vim.version.version11", "vim.version.version4")
    add_version_parent("vim.version.version11", "vim.version.version5")
    add_version_parent("vim.version.version11", "vim.version.version6")
    add_version_parent("vim.version.version11", "vim.version.version7")
    add_version_parent("vim.version.version11", "vim.version.version8")
    add_version_parent("vim.version.version11", "vim.version.version9")
    add_version_parent("vim.version.version11", "vmodl.version.version2")
    add_version_parent("vim.version.version11", "vmodl.version.version1")
    add_version_parent("vim.version.version11", "vmodl.version.version0")
    add_version_parent("vmodl.query.version.version1", "vmodl.query.version.version1")
    add_version_parent("vmodl.query.version.version1", "vmodl.version.version0")
    add_version_parent("sms.version.version3", "vmodl.query.version.version1")
    add_version_parent("sms.version.version3", "sms.version.version3")
    add_version_parent("sms.version.version3", "vmodl.query.version.version2")
    add_version_parent("sms.version.version3", "vmodl.query.version.version3")
    add_version_parent("sms.version.version3", "sms.version.version1")
    add_version_parent("sms.version.version3", "sms.version.version2")
    add_version_parent("sms.version.version3", "vim.version.version1")
    add_version_parent("sms.version.version3", "vim.version.version2")
    add_version_parent("sms.version.version3", "vim.version.version3")
    add_version_parent("sms.version.version3", "vim.version.version4")
    add_version_parent("sms.version.version3", "vim.version.version5")
    add_version_parent("sms.version.version3", "vim.version.version6")
    add_version_parent("sms.version.version3", "vmodl.version.version1")
    add_version_parent("sms.version.version3", "vmodl.version.version0")
    add_version_parent("vmodl.query.version.version2", "vmodl.query.version.version1")
    add_version_parent("vmodl.query.version.version2", "vmodl.query.version.version2")
    add_version_parent("vmodl.query.version.version2", "vmodl.version.version1")
    add_version_parent("vmodl.query.version.version2", "vmodl.version.version0")
    add_version_parent("sms.version.version4", "vmodl.query.version.version1")
    add_version_parent("sms.version.version4", "sms.version.version3")
    add_version_parent("sms.version.version4", "vmodl.query.version.version2")
    add_version_parent("sms.version.version4", "sms.version.version4")
    add_version_parent("sms.version.version4", "vmodl.query.version.version3")
    add_version_parent("sms.version.version4", "sms.version.version1")
    add_version_parent("sms.version.version4", "sms.version.version2")
    add_version_parent("sms.version.version4", "vim.version.version1")
    add_version_parent("sms.version.version4", "vim.version.version2")
    add_version_parent("sms.version.version4", "vim.version.version3")
    add_version_parent("sms.version.version4", "vim.version.version4")
    add_version_parent("sms.version.version4", "vim.version.version5")
    add_version_parent("sms.version.version4", "vim.version.version6")
    add_version_parent("sms.version.version4", "vmodl.version.version1")
    add_version_parent("sms.version.version4", "vmodl.version.version0")
    add_version_parent("vmodl.query.version.version3", "vmodl.query.version.version1")
    add_version_parent("vmodl.query.version.version3", "vmodl.query.version.version2")
    add_version_parent("vmodl.query.version.version3", "vmodl.query.version.version3")
    add_version_parent("vmodl.query.version.version3", "vmodl.version.version1")
    add_version_parent("vmodl.query.version.version3", "vmodl.version.version0")
    add_version_parent("sms.version.version1", "sms.version.version1")
    add_version_parent("sms.version.version1", "vmodl.version.version1")
    add_version_parent("sms.version.version1", "vmodl.version.version0")
    add_version_parent("vmodl.query.version.version4", "vmodl.query.version.version1")
    add_version_parent("vmodl.query.version.version4", "vmodl.query.version.version2")
    add_version_parent("vmodl.query.version.version4", "vmodl.query.version.version3")
    add_version_parent("vmodl.query.version.version4", "vmodl.query.version.version4")
    add_version_parent("vmodl.query.version.version4", "vmodl.version.version2")
    add_version_parent("vmodl.query.version.version4", "vmodl.version.version1")
    add_version_parent("vmodl.query.version.version4", "vmodl.version.version0")
    add_version_parent("sms.version.version2", "vmodl.query.version.version1")
    add_version_parent("sms.version.version2", "vmodl.query.version.version2")
    add_version_parent("sms.version.version2", "vmodl.query.version.version3")
    add_version_parent("sms.version.version2", "sms.version.version1")
    add_version_parent("sms.version.version2", "sms.version.version2")
    add_version_parent("sms.version.version2", "vim.version.version1")
    add_version_parent("sms.version.version2", "vim.version.version2")
    add_version_parent("sms.version.version2", "vim.version.version3")
    add_version_parent("sms.version.version2", "vim.version.version4")
    add_version_parent("sms.version.version2", "vim.version.version5")
    add_version_parent("sms.version.version2", "vim.version.version6")
    add_version_parent("sms.version.version2", "vmodl.version.version1")
    add_version_parent("sms.version.version2", "vmodl.version.version0")
    add_version_parent("sms.version.version5", "vmodl.query.version.version1")
    add_version_parent("sms.version.version5", "sms.version.version3")
    add_version_parent("sms.version.version5", "vmodl.query.version.version2")
    add_version_parent("sms.version.version5", "sms.version.version4")
    add_version_parent("sms.version.version5", "vmodl.query.version.version3")
    add_version_parent("sms.version.version5", "sms.version.version1")
    add_version_parent("sms.version.version5", "sms.version.version2")
    add_version_parent("sms.version.version5", "sms.version.version5")
    add_version_parent("sms.version.version5", "vim.version.version1")
    add_version_parent("sms.version.version5", "vim.version.version2")
    add_version_parent("sms.version.version5", "vim.version.version3")
    add_version_parent("sms.version.version5", "vim.version.version4")
    add_version_parent("sms.version.version5", "vim.version.version5")
    add_version_parent("sms.version.version5", "vim.version.version6")
    add_version_parent("sms.version.version5", "vmodl.version.version1")
    add_version_parent("sms.version.version5", "vmodl.version.version0")
    add_version_parent("sms.version.version11", "vim.version.version10")
    add_version_parent("sms.version.version11", "vim.version.version11")
    add_version_parent("sms.version.version11", "vmodl.query.version.version1")
    add_version_parent("sms.version.version11", "sms.version.version3")
    add_version_parent("sms.version.version11", "vmodl.query.version.version2")
    add_version_parent("sms.version.version11", "sms.version.version4")
    add_version_parent("sms.version.version11", "vmodl.query.version.version3")
    add_version_parent("sms.version.version11", "sms.version.version1")
    add_version_parent("sms.version.version11", "vmodl.query.version.version4")
    add_version_parent("sms.version.version11", "sms.version.version2")
    add_version_parent("sms.version.version11", "sms.version.version5")
    add_version_parent("sms.version.version11", "sms.version.version11")
    add_version_parent("sms.version.version11", "vmodl.reflect.version.version2")
    add_version_parent("sms.version.version11", "vmodl.reflect.version.version1")
    add_version_parent("sms.version.version11", "vim.version.version1")
    add_version_parent("sms.version.version11", "vim.version.version2")
    add_version_parent("sms.version.version11", "vim.version.version3")
    add_version_parent("sms.version.version11", "vim.version.version4")
    add_version_parent("sms.version.version11", "vim.version.version5")
    add_version_parent("sms.version.version11", "vim.version.version6")
    add_version_parent("sms.version.version11", "vim.version.version7")
    add_version_parent("sms.version.version11", "vim.version.version8")
    add_version_parent("sms.version.version11", "vim.version.version9")
    add_version_parent("sms.version.version11", "vmodl.version.version2")
    add_version_parent("sms.version.version11", "vmodl.version.version1")
    add_version_parent("sms.version.version11", "vmodl.version.version0")
    add_version_parent("vmodl.reflect.version.version2", "vmodl.reflect.version.version2")
    add_version_parent("vmodl.reflect.version.version2", "vmodl.reflect.version.version1")
    add_version_parent("vmodl.reflect.version.version2", "vmodl.version.version2")
    add_version_parent("vmodl.reflect.version.version2", "vmodl.version.version1")
    add_version_parent("vmodl.reflect.version.version2", "vmodl.version.version0")
    add_version_parent("vmodl.reflect.version.version1", "vmodl.reflect.version.version1")
    add_version_parent("vmodl.reflect.version.version1", "vmodl.version.version2")
    add_version_parent("vmodl.reflect.version.version1", "vmodl.version.version1")
    add_version_parent("vmodl.reflect.version.version1", "vmodl.version.version0")
    add_version_parent("vim.version.legacy", "vim.version.version10")
    add_version_parent("vim.version.legacy", "vim.version.version11")
    add_version_parent("vim.version.legacy", "vmodl.query.version.version1")
    add_version_parent("vim.version.legacy", "vmodl.query.version.version2")
    add_version_parent("vim.version.legacy", "vmodl.query.version.version3")
    add_version_parent("vim.version.legacy", "vmodl.query.version.version4")
    add_version_parent("vim.version.legacy", "vmodl.reflect.version.version2")
    add_version_parent("vim.version.legacy", "vmodl.reflect.version.version1")
    add_version_parent("vim.version.legacy", "vim.version.legacy")
    add_version_parent("vim.version.legacy", "vim.version.version1")
    add_version_parent("vim.version.legacy", "vim.version.version2")
    add_version_parent("vim.version.legacy", "vim.version.version3")
    add_version_parent("vim.version.legacy", "vim.version.version4")
    add_version_parent("vim.version.legacy", "vim.version.version5")
    add_version_parent("vim.version.legacy", "vim.version.version6")
    add_version_parent("vim.version.legacy", "vim.version.version7")
    add_version_parent("vim.version.legacy", "vim.version.version8")
    add_version_parent("vim.version.legacy", "vim.version.version9")
    add_version_parent("vim.version.legacy", "vmodl.version.version2")
    add_version_parent("vim.version.legacy", "vmodl.version.version1")
    add_version_parent("vim.version.legacy", "vmodl.version.version0")
    add_version_parent("vim.version.version1", "vmodl.query.version.version1")
    add_version_parent("vim.version.version1", "vim.version.version1")
    add_version_parent("vim.version.version1", "vmodl.version.version0")
    add_version_parent("vim.version.version2", "vmodl.query.version.version1")
    add_version_parent("vim.version.version2", "vim.version.version1")
    add_version_parent("vim.version.version2", "vim.version.version2")
    add_version_parent("vim.version.version2", "vmodl.version.version0")
    add_version_parent("vim.version.version3", "vmodl.query.version.version1")
    add_version_parent("vim.version.version3", "vim.version.version1")
    add_version_parent("vim.version.version3", "vim.version.version2")
    add_version_parent("vim.version.version3", "vim.version.version3")
    add_version_parent("vim.version.version3", "vmodl.version.version0")
    add_version_parent("vim.version.version4", "vmodl.query.version.version1")
    add_version_parent("vim.version.version4", "vim.version.version1")
    add_version_parent("vim.version.version4", "vim.version.version2")
    add_version_parent("vim.version.version4", "vim.version.version3")
    add_version_parent("vim.version.version4", "vim.version.version4")
    add_version_parent("vim.version.version4", "vmodl.version.version0")
    add_version_parent("vim.version.version5", "vmodl.query.version.version1")
    add_version_parent("vim.version.version5", "vmodl.query.version.version2")
    add_version_parent("vim.version.version5", "vim.version.version1")
    add_version_parent("vim.version.version5", "vim.version.version2")
    add_version_parent("vim.version.version5", "vim.version.version3")
    add_version_parent("vim.version.version5", "vim.version.version4")
    add_version_parent("vim.version.version5", "vim.version.version5")
    add_version_parent("vim.version.version5", "vmodl.version.version1")
    add_version_parent("vim.version.version5", "vmodl.version.version0")
    add_version_parent("vim.version.version6", "vmodl.query.version.version1")
    add_version_parent("vim.version.version6", "vmodl.query.version.version2")
    add_version_parent("vim.version.version6", "vmodl.query.version.version3")
    add_version_parent("vim.version.version6", "vim.version.version1")
    add_version_parent("vim.version.version6", "vim.version.version2")
    add_version_parent("vim.version.version6", "vim.version.version3")
    add_version_parent("vim.version.version6", "vim.version.version4")
    add_version_parent("vim.version.version6", "vim.version.version5")
    add_version_parent("vim.version.version6", "vim.version.version6")
    add_version_parent("vim.version.version6", "vmodl.version.version1")
    add_version_parent("vim.version.version6", "vmodl.version.version0")
    add_version_parent("vim.version.version7", "vmodl.query.version.version1")
    add_version_parent("vim.version.version7", "vmodl.query.version.version2")
    add_version_parent("vim.version.version7", "vmodl.query.version.version3")
    add_version_parent("vim.version.version7", "vmodl.query.version.version4")
    add_version_parent("vim.version.version7", "vmodl.reflect.version.version1")
    add_version_parent("vim.version.version7", "vim.version.version1")
    add_version_parent("vim.version.version7", "vim.version.version2")
    add_version_parent("vim.version.version7", "vim.version.version3")
    add_version_parent("vim.version.version7", "vim.version.version4")
    add_version_parent("vim.version.version7", "vim.version.version5")
    add_version_parent("vim.version.version7", "vim.version.version6")
    add_version_parent("vim.version.version7", "vim.version.version7")
    add_version_parent("vim.version.version7", "vmodl.version.version2")
    add_version_parent("vim.version.version7", "vmodl.version.version1")
    add_version_parent("vim.version.version7", "vmodl.version.version0")
    add_version_parent("vim.version.version8", "vmodl.query.version.version1")
    add_version_parent("vim.version.version8", "vmodl.query.version.version2")
    add_version_parent("vim.version.version8", "vmodl.query.version.version3")
    add_version_parent("vim.version.version8", "vmodl.query.version.version4")
    add_version_parent("vim.version.version8", "vmodl.reflect.version.version1")
    add_version_parent("vim.version.version8", "vim.version.version1")
    add_version_parent("vim.version.version8", "vim.version.version2")
    add_version_parent("vim.version.version8", "vim.version.version3")
    add_version_parent("vim.version.version8", "vim.version.version4")
    add_version_parent("vim.version.version8", "vim.version.version5")
    add_version_parent("vim.version.version8", "vim.version.version6")
    add_version_parent("vim.version.version8", "vim.version.version7")
    add_version_parent("vim.version.version8", "vim.version.version8")
    add_version_parent("vim.version.version8", "vmodl.version.version2")
    add_version_parent("vim.version.version8", "vmodl.version.version1")
    add_version_parent("vim.version.version8", "vmodl.version.version0")
    add_version_parent("vim.version.version9", "vmodl.query.version.version1")
    add_version_parent("vim.version.version9", "vmodl.query.version.version2")
    add_version_parent("vim.version.version9", "vmodl.query.version.version3")
    add_version_parent("vim.version.version9", "vmodl.query.version.version4")
    add_version_parent("vim.version.version9", "vmodl.reflect.version.version1")
    add_version_parent("vim.version.version9", "vim.version.version1")
    add_version_parent("vim.version.version9", "vim.version.version2")
    add_version_parent("vim.version.version9", "vim.version.version3")
    add_version_parent("vim.version.version9", "vim.version.version4")
    add_version_parent("vim.version.version9", "vim.version.version5")
    add_version_parent("vim.version.version9", "vim.version.version6")
    add_version_parent("vim.version.version9", "vim.version.version7")
    add_version_parent("vim.version.version9", "vim.version.version8")
    add_version_parent("vim.version.version9", "vim.version.version9")
    add_version_parent("vim.version.version9", "vmodl.version.version2")
    add_version_parent("vim.version.version9", "vmodl.version.version1")
    add_version_parent("vim.version.version9", "vmodl.version.version0")
    add_version_parent("vmodl.version.version2", "vmodl.version.version2")
    add_version_parent("vmodl.version.version2", "vmodl.version.version1")
    add_version_parent("vmodl.version.version2", "vmodl.version.version0")
    add_version_parent("vmodl.version.version1", "vmodl.version.version1")
    add_version_parent("vmodl.version.version1", "vmodl.version.version0")
    add_version_parent("sms.version.legacy", "vim.version.version10")
    add_version_parent("sms.version.legacy", "vim.version.version11")
    add_version_parent("sms.version.legacy", "vmodl.query.version.version1")
    add_version_parent("sms.version.legacy", "sms.version.version3")
    add_version_parent("sms.version.legacy", "vmodl.query.version.version2")
    add_version_parent("sms.version.legacy", "sms.version.version4")
    add_version_parent("sms.version.legacy", "vmodl.query.version.version3")
    add_version_parent("sms.version.legacy", "sms.version.version1")
    add_version_parent("sms.version.legacy", "vmodl.query.version.version4")
    add_version_parent("sms.version.legacy", "sms.version.version2")
    add_version_parent("sms.version.legacy", "sms.version.version5")
    add_version_parent("sms.version.legacy", "sms.version.version11")
    add_version_parent("sms.version.legacy", "vmodl.reflect.version.version2")
    add_version_parent("sms.version.legacy", "vmodl.reflect.version.version1")
    add_version_parent("sms.version.legacy", "vim.version.legacy")
    add_version_parent("sms.version.legacy", "vim.version.version1")
    add_version_parent("sms.version.legacy", "vim.version.version2")
    add_version_parent("sms.version.legacy", "vim.version.version3")
    add_version_parent("sms.version.legacy", "vim.version.version4")
    add_version_parent("sms.version.legacy", "vim.version.version5")
    add_version_parent("sms.version.legacy", "vim.version.version6")
    add_version_parent("sms.version.legacy", "vim.version.version7")
    add_version_parent("sms.version.legacy", "vim.version.version8")
    add_version_parent("sms.version.legacy", "vim.version.version9")
    add_version_parent("sms.version.legacy", "vmodl.version.version2")
    add_version_parent("sms.version.legacy", "vmodl.version.version1")
    add_version_parent("sms.version.legacy", "sms.version.legacy")
    add_version_parent("sms.version.legacy", "vmodl.version.version0")
    add_version_parent("vmodl.version.version0", "vmodl.version.version0")
    newestVersions.add("sms.version.version11")
    stableVersions.add("sms.version.version11")
    publicVersions.add("sms.version.version11")
    oldestVersions.add("sms.version.version1")
    create_data_type("sms.AboutInfo", "SmsAboutInfo", "vmodl.DynamicData", "sms.version.version2", [["name", "string", "sms.version.version2"], ["fullName", "string", "sms.version.version2"], ["vendor", "string", "sms.version.version2"], ["apiVersion", "string", "sms.version.version2"], ["instanceUuid", "string", "sms.version.version2"], ["vasaApiVersion", "string", "sms.version.version4", {:optional => true}]])
    create_data_type("sms.EntityReference", "EntityReference", "vmodl.DynamicData", "sms.version.version1", [["id", "string", "sms.version.version1"], ["type", "sms.EntityReference.EntityType", "sms.version.version1", {:optional => true}]])
    create_enum_type("sms.EntityReference.EntityType", "EntityReferenceEntityType", "sms.version.version1", ["datacenter", "resourcePool", "storagePod", "cluster", "vm", "datastore", "host", "vmFile", "scsiPath", "scsiTarget", "scsiVolume", "scsiAdapter", "nasMount"])
    create_data_type("sms.FaultDomainFilter", "FaultDomainFilter", "vmodl.DynamicData", "sms.version.version11", [["providerId", "string", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.ReplicationGroupFilter", "ReplicationGroupFilter", "vmodl.DynamicData", "sms.version.version11", [["groupId", "vim.vm.replication.ReplicationGroupId[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.ResyncSpec", "ResyncSpec", "vmodl.DynamicData", "sms.version.version4", nil)
    create_managed_type("sms.ServiceInstance", "SmsServiceInstance", "vmodl.ManagedObject", "sms.version.version1", nil, [["queryStorageManager", "QueryStorageManager", "sms.version.version2", [], [{}, "sms.StorageManager", "sms.StorageManager"], "StorageViews.View", nil], ["querySessionManager", "QuerySessionManager", "sms.version.version5", [], [{}, "sms.auth.SessionManager", "sms.auth.SessionManager"], "System.Anonymous", nil], ["queryAboutInfo", "QueryAboutInfo", "sms.version.version2", [], [{}, "sms.AboutInfo", "sms.AboutInfo"], "StorageViews.View", nil]])
    create_managed_type("sms.StorageManager", "SmsStorageManager", "vmodl.ManagedObject", "sms.version.version2", nil, [["registerProvider", "RegisterProvider_Task", "sms.version.version2", [["providerSpec", "sms.provider.ProviderSpec", "sms.version.version2", {}, nil]], [{}, "sms.Task", "sms.provider.Provider"], "StorageViews.ConfigureService", ["vim.fault.AlreadyExists", "sms.fault.ProviderRegistrationFault"]], ["unregisterProvider", "UnregisterProvider_Task", "sms.version.version2", [["providerId", "string", "sms.version.version2", {}, nil]], [{}, "sms.Task", "void"], "StorageViews.ConfigureService", ["vim.fault.NotFound", "sms.fault.ProviderUnregistrationFault"]], ["queryProvider", "QueryProvider", "sms.version.version2", [], [{:optional => true}, "sms.provider.Provider[]", "sms.provider.Provider[]"], "StorageViews.View", ["sms.fault.QueryExecutionFault"]], ["queryArray", "QueryArray", "sms.version.version2", [["providerId", "string[]", "sms.version.version2", {:optional => true}, nil]], [{:optional => true}, "sms.storage.StorageArray[]", "sms.storage.StorageArray[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryProcessorAssociatedWithArray", "QueryProcessorAssociatedWithArray", "sms.version.version2", [["arrayId", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "sms.storage.StorageProcessor[]", "sms.storage.StorageProcessor[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryPortAssociatedWithArray", "QueryPortAssociatedWithArray", "sms.version.version2", [["arrayId", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "sms.storage.StoragePort[]", "sms.storage.StoragePort[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryPortAssociatedWithLun", "QueryPortAssociatedWithLun", "sms.version.version2", [["scsi3Id", "string", "sms.version.version2", {}, nil], ["arrayId", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "sms.storage.StoragePort", "sms.storage.StoragePort"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryLunAssociatedWithPort", "QueryLunAssociatedWithPort", "sms.version.version2", [["portId", "string", "sms.version.version2", {}, nil], ["arrayId", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "sms.storage.StorageLun[]", "sms.storage.StorageLun[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryArrayAssociatedWithLun", "QueryArrayAssociatedWithLun", "sms.version.version2", [["canonicalName", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "sms.storage.StorageArray", "sms.storage.StorageArray"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryPortAssociatedWithProcessor", "QueryPortAssociatedWithProcessor", "sms.version.version2", [["processorId", "string", "sms.version.version2", {}, nil], ["arrayId", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "sms.storage.StoragePort[]", "sms.storage.StoragePort[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryLunAssociatedWithArray", "QueryLunAssociatedWithArray", "sms.version.version2", [["arrayId", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "sms.storage.StorageLun[]", "sms.storage.StorageLun[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryFileSystemAssociatedWithArray", "QueryFileSystemAssociatedWithArray", "sms.version.version2", [["arrayId", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "sms.storage.StorageFileSystem[]", "sms.storage.StorageFileSystem[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryDatastoreCapability", "QueryDatastoreCapability", "sms.version.version2", [["datastore", "vim.Datastore", "sms.version.version2", {}, nil]], [{:optional => true}, "sms.storage.StorageCapability", "sms.storage.StorageCapability"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryHostAssociatedWithLun", "QueryHostAssociatedWithLun", "sms.version.version2", [["scsi3Id", "string", "sms.version.version2", {}, nil], ["arrayId", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "vim.HostSystem[]", "vim.HostSystem[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryVmfsDatastoreAssociatedWithLun", "QueryVmfsDatastoreAssociatedWithLun", "sms.version.version2", [["scsi3Id", "string", "sms.version.version2", {}, nil], ["arrayId", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "vim.Datastore", "vim.Datastore"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryNfsDatastoreAssociatedWithFileSystem", "QueryNfsDatastoreAssociatedWithFileSystem", "sms.version.version2", [["fileSystemId", "string", "sms.version.version2", {}, nil], ["arrayId", "string", "sms.version.version2", {}, nil]], [{:optional => true}, "vim.Datastore", "vim.Datastore"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryDrsMigrationCapabilityForPerformance", "QueryDrsMigrationCapabilityForPerformance", "sms.version.version2", [["srcDatastore", "vim.Datastore", "sms.version.version2", {}, nil], ["dstDatastore", "vim.Datastore", "sms.version.version2", {}, nil]], [{}, "boolean", "boolean"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryDrsMigrationCapabilityForPerformanceEx", "QueryDrsMigrationCapabilityForPerformanceEx", "sms.version.version3", [["datastore", "vim.Datastore[]", "sms.version.version3", {}, nil]], [{}, "sms.storage.DrsMigrationCapabilityResult", "sms.storage.DrsMigrationCapabilityResult"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryDrsMigrationCapability", "QueryDrsMigrationCapability", "sms.version.version5", [["datastore", "vim.Datastore[]", "sms.version.version5", {}, nil]], [{}, "sms.storage.DrsMigrationCapabilityResultEx", "sms.storage.DrsMigrationCapabilityResultEx"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryStorageContainer", "QueryStorageContainer", "sms.version.version5", [["containerSpec", "sms.storage.StorageContainerSpec", "sms.version.version5", {:optional => true}, nil]], [{:optional => true}, "sms.storage.StorageContainerResult", "sms.storage.StorageContainerResult"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryProviderUuid", "GetVasaProviderUuid", "sms.version.version4", [["providerId", "string", "sms.version.version4", {}, nil], ["providerNamespace", "string", "sms.version.version4", {}, nil]], [{}, "string", "string"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["resyncVsanProviders", "ResyncVsanProviders_Task", "sms.version.version4", [["resyncSpec", "sms.ResyncSpec", "sms.version.version4", {:optional => true}, nil]], [{}, "sms.Task", "void"], "StorageViews.ConfigureService", ["sms.fault.VsanProvidersResyncFailed"]], ["prepareForBindingChange", "prepareForBindingChange", "sms.version.version5", [["vvolRebindSpec", "sms.storage.VvolRebindSpec", "sms.version.version5", {}, nil], ["destHostId", "string", "sms.version.version5", {}, nil]], [{}, "sms.storage.BatchReturnStatus[]", "sms.storage.BatchReturnStatus[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.VvolRebindFault"]], ["cancelBindingChange", "cancelBindingChange", "sms.version.version5", [["vvolRebindSpec", "sms.storage.VvolRebindSpec", "sms.version.version5", {}, nil]], [{}, "sms.storage.BatchReturnStatus[]", "sms.storage.BatchReturnStatus[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.VvolRebindFault"]], ["bindingChangeComplete", "bindingChangeComplete", "sms.version.version5", [["vvolRebindSpec", "sms.storage.VvolRebindSpec", "sms.version.version5", {}, nil]], [{}, "sms.storage.BatchReturnStatus[]", "sms.storage.BatchReturnStatus[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.VvolRebindFault"]], ["queryAssociatedBackingStoragePool", "QueryAssociatedBackingStoragePool", "sms.version.version5", [["entityId", "string", "sms.version.version5", {:optional => true}, nil], ["entityType", "string", "sms.version.version5", {:optional => true}, nil]], [{:optional => true}, "sms.storage.BackingStoragePool[]", "sms.storage.BackingStoragePool[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryDatastoreBackingPoolMapping", "QueryDatastoreBackingPoolMapping", "sms.version.version5", [["datastore", "vim.Datastore[]", "sms.version.version5", {}, nil]], [{}, "sms.storage.DatastoreBackingPoolMapping[]", "sms.storage.DatastoreBackingPoolMapping[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["refreshCACertificatesAndCRLs", "SmsRefreshCACertificatesAndCRLs_Task", "sms.version.version5", [["providerId", "string[]", "sms.version.version5", {:optional => true}, nil]], [{}, "sms.Task", "void"], "StorageViews.ConfigureService", ["vim.fault.NotFound", "sms.fault.CertificateRefreshFailed"]], ["queryFaultDomain", "QueryFaultDomain", "sms.version.version11", [["filter", "sms.FaultDomainFilter", "sms.version.version11", {:optional => true}, nil]], [{:optional => true}, "vim.vm.replication.FaultDomainId[]", "vim.vm.replication.FaultDomainId[]"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.QueryExecutionFault"]], ["queryReplicationGroupInfo", "QueryReplicationGroupInfo", "sms.version.version11", [["rgFilter", "sms.ReplicationGroupFilter", "sms.version.version11", {}, nil]], [{:optional => true}, "sms.storage.replication.GroupOperationResult[]", "sms.storage.replication.GroupOperationResult[]"], "StorageViews.View", ["sms.fault.QueryExecutionFault"]]])
    create_managed_type("sms.Task", "SmsTask", "vmodl.ManagedObject", "sms.version.version2", nil, [["queryResult", "QuerySmsTaskResult", "sms.version.version2", [], [{:optional => true}, "anyType", "anyType"], "StorageViews.View", nil], ["queryInfo", "QuerySmsTaskInfo", "sms.version.version2", [], [{}, "sms.TaskInfo", "sms.TaskInfo"], "StorageViews.View", nil]])
    create_data_type("sms.TaskInfo", "SmsTaskInfo", "vmodl.DynamicData", "sms.version.version2", [["key", "string", "sms.version.version2"], ["task", "sms.Task", "sms.version.version2"], ["object", "vmodl.ManagedObject", "sms.version.version2", {:optional => true}], ["error", "vmodl.MethodFault", "sms.version.version2", {:optional => true}], ["result", "anyType", "sms.version.version2", {:optional => true}], ["startTime", "vmodl.DateTime", "sms.version.version2", {:optional => true}], ["completionTime", "vmodl.DateTime", "sms.version.version2", {:optional => true}], ["state", "string", "sms.version.version2"], ["progress", "int", "sms.version.version2", {:optional => true}]])
    create_enum_type("sms.TaskInfo.State", "SmsTaskState", "sms.version.version1", ["queued", "running", "success", "error"])
    create_managed_type("sms.auth.SessionManager", "SmsSessionManager", "vmodl.ManagedObject", "sms.version.version5", nil, [["loginByToken", "SmsLoginByToken", "sms.version.version5", [["delegatedTokenXml", "string", "sms.version.version5", {}, nil]], [{}, "void", "void"], "System.Anonymous", ["sms.fault.InvalidLogin"]], ["logout", "SmsLogout", "sms.version.version5", [], [{}, "void", "void"], "StorageViews.View", nil]])
    create_data_type("sms.fault.AuthConnectionFailed", "AuthConnectionFailed", "vim.fault.NoPermission", "sms.version.version2", nil)
    create_data_type("sms.fault.CertificateRefreshFailed", "CertificateRefreshFailed", "vmodl.MethodFault", "sms.version.version5", [["providerId", "string[]", "sms.version.version5", {:optional => true}]])
    create_data_type("sms.fault.CertificateRevocationFailed", "CertificateRevocationFailed", "vmodl.MethodFault", "sms.version.version5", nil)
    create_data_type("sms.fault.DuplicateEntry", "DuplicateEntry", "vmodl.MethodFault", "sms.version.version11", nil)
    create_data_type("sms.fault.InactiveProvider", "InactiveProvider", "vmodl.MethodFault", "sms.version.version11", [["mapping", "sms.storage.FaultDomainProviderMapping[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.fault.InvalidLogin", "SmsInvalidLogin", "vmodl.MethodFault", "sms.version.version5", nil)
    create_data_type("sms.fault.InvalidProfile", "InvalidProfile", "vmodl.MethodFault", "sms.version.version11", nil)
    create_data_type("sms.fault.InvalidSession", "InvalidSession", "vim.fault.NoPermission", "sms.version.version2", [["sessionCookie", "string", "sms.version.version2"]])
    create_data_type("sms.fault.MultipleSortSpecsNotSupported", "MultipleSortSpecsNotSupported", "vmodl.fault.InvalidArgument", "sms.version.version1", nil)
    create_data_type("sms.fault.NotSupportedByProvider", "NotSupportedByProvider", "vmodl.MethodFault", "sms.version.version11", nil)
    create_data_type("sms.fault.ProviderBusy", "ProviderBusy", "vmodl.MethodFault", "sms.version.version11", nil)
    create_data_type("sms.fault.ProviderConnectionFailed", "ProviderConnectionFailed", "vmodl.RuntimeFault", "sms.version.version2", nil)
    create_data_type("sms.fault.ProviderOutOfProvisioningResource", "ProviderOutOfProvisioningResource", "vmodl.MethodFault", "sms.version.version11", [["provisioningResourceId", "string", "sms.version.version11"], ["availableBefore", "long", "sms.version.version11", {:optional => true}], ["availableAfter", "long", "sms.version.version11", {:optional => true}], ["total", "long", "sms.version.version11", {:optional => true}], ["isTransient", "boolean", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.fault.ProviderOutOfResource", "ProviderOutOfResource", "vmodl.MethodFault", "sms.version.version11", nil)
    create_data_type("sms.fault.ProviderRegistrationFault", "ProviderRegistrationFault", "vmodl.MethodFault", "sms.version.version2", nil)
    create_data_type("sms.fault.ProviderSyncFailed", "ProviderSyncFailed", "vmodl.MethodFault", "sms.version.version1", nil)
    create_data_type("sms.fault.ProviderUnavailable", "ProviderUnavailable", "vmodl.MethodFault", "sms.version.version11", nil)
    create_data_type("sms.fault.ProviderUnregistrationFault", "ProviderUnregistrationFault", "vmodl.MethodFault", "sms.version.version2", nil)
    create_data_type("sms.fault.ProxyRegistrationFailed", "ProxyRegistrationFailed", "vmodl.RuntimeFault", "sms.version.version1", nil)
    create_data_type("sms.fault.QueryExecutionFault", "QueryExecutionFault", "vmodl.MethodFault", "sms.version.version1", nil)
    create_data_type("sms.fault.QueryNotSupported", "QueryNotSupported", "vmodl.fault.InvalidArgument", "sms.version.version1", [["entityType", "sms.EntityReference.EntityType", "sms.version.version1", {:optional => true}], ["relatedEntityType", "sms.EntityReference.EntityType", "sms.version.version1"]])
    create_data_type("sms.fault.ResourceInUse", "SmsResourceInUse", "vim.fault.ResourceInUse", "sms.version.version11", [["deviceIds", "sms.storage.replication.DeviceId[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.fault.ServiceNotInitialized", "ServiceNotInitialized", "vmodl.RuntimeFault", "sms.version.version1", nil)
    create_data_type("sms.fault.SyncInProgress", "SyncInProgress", "sms.fault.ProviderSyncFailed", "sms.version.version1", nil)
    create_data_type("sms.fault.TooMany", "TooMany", "vmodl.MethodFault", "sms.version.version11", [["maxBatchSize", "long", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.fault.VsanProvidersResyncFailed", "VsanProvidersResyncFailed", "vmodl.MethodFault", "sms.version.version4", [["providerUrl", "string[]", "sms.version.version4"]])
    create_data_type("sms.fault.VvolRebindFault", "VvolRebindFault", "vmodl.MethodFault", "sms.version.version5", nil)
    create_data_type("sms.fault.replication.ReplicationFault", "SmsReplicationFault", "vmodl.MethodFault", "sms.version.version11", nil)
    create_data_type("sms.fault.replication.SyncOngoing", "SyncOngoing", "sms.fault.replication.ReplicationFault", "sms.version.version11", [["task", "sms.Task", "sms.version.version11"]])
    create_data_type("sms.provider.AlarmFilter", "AlarmFilter", "vmodl.DynamicData", "sms.version.version11", [["alarmStatus", "string", "sms.version.version11", {:optional => true}], ["alarmType", "string", "sms.version.version11", {:optional => true}], ["entityType", "string", "sms.version.version11", {:optional => true}], ["entityId", "anyType[]", "sms.version.version11", {:optional => true}], ["pageMarker", "string", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.provider.AlarmResult", "AlarmResult", "vmodl.DynamicData", "sms.version.version11", [["storageAlarm", "sms.storage.StorageAlarm[]", "sms.version.version11", {:optional => true}], ["pageMarker", "string", "sms.version.version11", {:optional => true}]])
    create_managed_type("sms.provider.Provider", "SmsProvider", "vmodl.ManagedObject", "sms.version.version2", nil, [["queryProviderInfo", "QueryProviderInfo", "sms.version.version2", [], [{}, "sms.provider.ProviderInfo", "sms.provider.ProviderInfo"], "StorageViews.View", nil]])
    create_data_type("sms.provider.ProviderInfo", "SmsProviderInfo", "vmodl.DynamicData", "sms.version.version2", [["uid", "string", "sms.version.version2"], ["name", "string", "sms.version.version2"], ["description", "string", "sms.version.version2", {:optional => true}], ["version", "string", "sms.version.version2", {:optional => true}]])
    create_data_type("sms.provider.ProviderSpec", "SmsProviderSpec", "vmodl.DynamicData", "sms.version.version2", [["name", "string", "sms.version.version2"], ["description", "string", "sms.version.version2", {:optional => true}]])
    create_managed_type("sms.provider.VasaProvider", "VasaProvider", "sms.provider.Provider", "sms.version.version2", nil, [["sync", "VasaProviderSync_Task", "sms.version.version2", [["arrayId", "string", "sms.version.version2", {:optional => true}, nil]], [{}, "sms.Task", "void"], "StorageViews.View", ["sms.fault.ProviderSyncFailed"]], ["refreshCertificate", "VasaProviderRefreshCertificate_Task", "sms.version.version5", [], [{}, "sms.Task", "void"], "StorageViews.ConfigureService", ["sms.fault.CertificateRefreshFailed"]], ["revokeCertificate", "VasaProviderRevokeCertificate_Task", "sms.version.version5", [], [{}, "sms.Task", "void"], "StorageViews.ConfigureService", ["sms.fault.CertificateRevocationFailed"]], ["reconnect", "VasaProviderReconnect_Task", "sms.version.version5", [], [{}, "sms.Task", "void"], "StorageViews.ConfigureService", ["sms.fault.InvalidCertificate", "sms.fault.ProviderConnectionFailed"]], ["disconnect", "VasaProviderDisconnect_Task", "sms.version.version5", [], [{}, "sms.Task", "void"], "StorageViews.ConfigureService", nil], ["queryReplicationPeer", "QueryReplicationPeer", "sms.version.version11", [["faultDomainId", "vim.vm.replication.FaultDomainId[]", "sms.version.version11", {:optional => true}, nil]], [{:optional => true}, "sms.storage.replication.QueryReplicationPeerResult[]", "sms.storage.replication.QueryReplicationPeerResult[]"], "StorageViews.View", ["sms.fault.ProviderUnavailable", "sms.fault.InactiveProvider", "sms.fault.ProviderBusy", "sms.fault.QueryExecutionFault"]], ["queryReplicationGroup", "QueryReplicationGroup", "sms.version.version11", [["groupId", "vim.vm.replication.ReplicationGroupId[]", "sms.version.version11", {:optional => true}, nil]], [{:optional => true}, "sms.storage.replication.GroupOperationResult[]", "sms.storage.replication.GroupOperationResult[]"], "StorageViews.View", ["sms.fault.ProviderUnavailable", "sms.fault.InactiveProvider", "sms.fault.ProviderBusy", "sms.fault.QueryExecutionFault"]], ["queryPointInTimeReplica", "QueryPointInTimeReplica", "sms.version.version11", [["groupId", "vim.vm.replication.ReplicationGroupId[]", "sms.version.version11", {:optional => true}, nil], ["queryParam", "sms.storage.replication.QueryPointInTimeReplicaParam", "sms.version.version11", {:optional => true}, nil]], [{:optional => true}, "sms.storage.replication.GroupOperationResult[]", "sms.storage.replication.GroupOperationResult[]"], "StorageViews.View", ["sms.fault.ProviderUnavailable", "sms.fault.InactiveProvider", "sms.fault.ProviderBusy", "sms.fault.QueryExecutionFault"]], ["testFailoverReplicationGroupStart", "TestFailoverReplicationGroupStart_Task", "sms.version.version11", [["testFailoverParam", "sms.storage.replication.TestFailoverParam", "sms.version.version11", {}, nil]], [{}, "sms.Task", "void"], "StorageViews.ConfigureService", ["sms.fault.ProviderUnavailable", "sms.fault.ProviderOutOfResource", "sms.fault.InactiveProvider", "sms.fault.TooMany", "sms.fault.ProviderBusy", "sms.fault.replication.ReplicationFault"]], ["testFailoverReplicationGroupStop", "TestFailoverReplicationGroupStop_Task", "sms.version.version11", [["groupId", "vim.vm.replication.ReplicationGroupId[]", "sms.version.version11", {:optional => true}, nil], ["force", "boolean", "sms.version.version11", {}, nil]], [{}, "sms.Task", "void"], "StorageViews.ConfigureService", ["sms.fault.ProviderUnavailable", "sms.fault.ProviderOutOfResource", "sms.fault.InactiveProvider", "sms.fault.TooMany", "sms.fault.ProviderBusy", "sms.fault.replication.ReplicationFault", "sms.fault.NotSupportedByProvider"]], ["promoteReplicationGroup", "PromoteReplicationGroup_Task", "sms.version.version11", [["promoteParam", "sms.storage.replication.PromoteParam", "sms.version.version11", {}, nil]], [{:optional => true}, "sms.Task", "sms.storage.replication.GroupOperationResult[]"], "StorageViews.ConfigureService", ["sms.fault.ProviderUnavailable", "sms.fault.ProviderOutOfResource", "sms.fault.InactiveProvider", "sms.fault.TooMany", "sms.fault.ProviderBusy", "sms.fault.replication.ReplicationFault"]], ["syncReplicationGroup", "SyncReplicationGroup_Task", "sms.version.version11", [["groupId", "vim.vm.replication.ReplicationGroupId[]", "sms.version.version11", {:optional => true}, nil], ["pitName", "string", "sms.version.version11", {}, nil]], [{:optional => true}, "sms.Task", "sms.storage.replication.GroupOperationResult[]"], "StorageViews.ConfigureService", ["sms.fault.ProviderUnavailable", "sms.fault.ProviderOutOfResource", "sms.fault.InactiveProvider", "sms.fault.ProviderBusy", "sms.fault.replication.ReplicationFault", "sms.fault.TooMany"]], ["prepareFailoverReplicationGroup", "PrepareFailoverReplicationGroup_Task", "sms.version.version11", [["groupId", "vim.vm.replication.ReplicationGroupId[]", "sms.version.version11", {:optional => true}, nil]], [{:optional => true}, "sms.Task", "sms.storage.replication.GroupOperationResult[]"], "StorageViews.ConfigureService", ["sms.fault.ProviderUnavailable", "sms.fault.ProviderOutOfResource", "sms.fault.InactiveProvider", "sms.fault.TooMany", "sms.fault.ProviderBusy", "sms.fault.replication.ReplicationFault"]], ["failoverReplicationGroup", "FailoverReplicationGroup_Task", "sms.version.version11", [["failoverParam", "sms.storage.replication.FailoverParam", "sms.version.version11", {}, nil]], [{:optional => true}, "sms.Task", "sms.storage.replication.GroupOperationResult[]"], "StorageViews.ConfigureService", ["sms.fault.ProviderUnavailable", "sms.fault.ProviderOutOfResource", "sms.fault.InactiveProvider", "sms.fault.TooMany", "sms.fault.ProviderBusy", "sms.fault.replication.ReplicationFault"]], ["reverseReplicateGroup", "ReverseReplicateGroup_Task", "sms.version.version11", [["groupId", "vim.vm.replication.ReplicationGroupId[]", "sms.version.version11", {:optional => true}, nil]], [{:optional => true}, "sms.Task", "sms.storage.replication.GroupOperationResult[]"], "StorageViews.ConfigureService", ["sms.fault.ProviderUnavailable", "sms.fault.ProviderOutOfResource", "sms.fault.InactiveProvider", "sms.fault.TooMany", "sms.fault.ProviderBusy", "sms.fault.replication.ReplicationFault"]], ["queryActiveAlarm", "QueryActiveAlarm", "sms.version.version11", [["alarmFilter", "sms.provider.AlarmFilter", "sms.version.version11", {:optional => true}, nil]], [{:optional => true}, "sms.provider.AlarmResult", "sms.provider.AlarmResult"], "StorageViews.View", ["vim.fault.NotFound", "sms.fault.ProviderBusy", "sms.fault.InactiveProvider", "sms.fault.ProviderUnavailable", "sms.fault.QueryExecutionFault"]]])
    create_data_type("sms.provider.VasaProviderInfo", "VasaProviderInfo", "sms.provider.ProviderInfo", "sms.version.version2", [["url", "string", "sms.version.version2"], ["certificate", "string", "sms.version.version2", {:optional => true}], ["status", "string", "sms.version.version2", {:optional => true}], ["statusFault", "vmodl.MethodFault", "sms.version.version11", {:optional => true}], ["vasaVersion", "string", "sms.version.version2", {:optional => true}], ["namespace", "string", "sms.version.version2", {:optional => true}], ["lastSyncTime", "string", "sms.version.version2", {:optional => true}], ["supportedVendorModelMapping", "sms.provider.VasaProviderInfo.SupportedVendorModelMapping[]", "sms.version.version2", {:optional => true}], ["supportedProfile", "string[]", "sms.version.version2", {:optional => true}], ["supportedProviderProfile", "string[]", "sms.version.version4", {:optional => true}], ["relatedStorageArray", "sms.provider.VasaProviderInfo.RelatedStorageArray[]", "sms.version.version4", {:optional => true}], ["providerId", "string", "sms.version.version4", {:optional => true}], ["certificateExpiryDate", "string", "sms.version.version5", {:optional => true}], ["certificateStatus", "string", "sms.version.version5", {:optional => true}], ["serviceLocation", "string", "sms.version.version5", {:optional => true}], ["needsExplicitActivation", "boolean", "sms.version.version5", {:optional => true}], ["maxBatchSize", "long", "sms.version.version11", {:optional => true}], ["retainVasaProviderCertificate", "boolean", "sms.version.version5", {:optional => true}], ["arrayIndependentProvider", "boolean", "sms.version.version11", {:optional => true}], ["type", "string", "sms.version.version11", {:optional => true}], ["priority", "int", "sms.version.version11", {:optional => true}], ["failoverGroupId", "string", "sms.version.version11", {:optional => true}]])
    create_enum_type("sms.provider.VasaProviderInfo.CertificateStatus", "VasaProviderCertificateStatus", "sms.version.version5", ["valid", "expirySoftLimitReached", "expiryHardLimitReached", "expired", "invalid"])
    create_data_type("sms.provider.VasaProviderInfo.RelatedStorageArray", "RelatedStorageArray", "vmodl.DynamicData", "sms.version.version4", [["arrayId", "string", "sms.version.version4"], ["active", "boolean", "sms.version.version4"], ["manageable", "boolean", "sms.version.version4"], ["priority", "int", "sms.version.version4"]])
    create_data_type("sms.provider.VasaProviderInfo.SupportedVendorModelMapping", "SupportedVendorModelMapping", "vmodl.DynamicData", "sms.version.version1", [["vendorId", "string", "sms.version.version1", {:optional => true}], ["modelId", "string", "sms.version.version1", {:optional => true}]])
    create_enum_type("sms.provider.VasaProviderInfo.VasaProviderStatus", "VasaProviderStatus", "sms.version.version1", ["online", "offline", "syncError", "unknown", "connected", "disconnected"])
    create_enum_type("sms.provider.VasaProviderInfo.VasaProviderProfile", "VasaProviderProfile", "sms.version.version1", ["blockDevice", "fileSystem", "capability"])
    create_enum_type("sms.provider.VasaProviderInfo.ProviderProfile", "ProviderProfile", "sms.version.version11", ["ProfileBasedManagement", "Replication"])
    create_enum_type("sms.provider.VasaProviderInfo.Type", "VpType", "sms.version.version11", ["PERSISTENCE", "DATASERVICE", "UNKNOWN"])
    create_data_type("sms.provider.VasaProviderSpec", "VasaProviderSpec", "sms.provider.ProviderSpec", "sms.version.version2", [["username", "string", "sms.version.version2"], ["password", "string", "sms.version.version2", {:secret => true}], ["url", "string", "sms.version.version2"], ["certificate", "string", "sms.version.version2", {:optional => true}]])
    create_enum_type("sms.storage.AlarmStatus", "SmsAlarmStatus", "sms.version.version11", ["Red", "Green", "Yellow"])
    create_enum_type("sms.storage.AlarmType", "AlarmType", "sms.version.version11", ["SpaceCapacityAlarm", "CapabilityAlarm", "StorageObjectAlarm", "ObjectAlarm", "ComplianceAlarm", "ManageabilityAlarm", "ReplicationAlarm"])
    create_data_type("sms.storage.BackingConfig", "BackingConfig", "vmodl.DynamicData", "sms.version.version5", [["thinProvisionBackingIdentifier", "string", "sms.version.version5", {:optional => true}], ["deduplicationBackingIdentifier", "string", "sms.version.version5", {:optional => true}], ["autoTieringEnabled", "boolean", "sms.version.version5", {:optional => true}], ["deduplicationEfficiency", "long", "sms.version.version5", {:optional => true}], ["performanceOptimizationInterval", "long", "sms.version.version5", {:optional => true}]])
    create_data_type("sms.storage.BackingStoragePool", "BackingStoragePool", "vmodl.DynamicData", "sms.version.version5", [["uuid", "string", "sms.version.version5"], ["type", "string", "sms.version.version5"], ["capacityInMB", "long", "sms.version.version5"], ["usedSpaceInMB", "long", "sms.version.version5"]])
    create_enum_type("sms.storage.BackingStoragePool.BackingStoragePoolType", "BackingStoragePoolType", "sms.version.version1", ["thinProvisioningPool", "deduplicationPool", "thinAndDeduplicationCombinedPool"])
    create_data_type("sms.storage.BatchErrorResult", "BatchErrorResult", "vmodl.DynamicData", "sms.version.version5", [["error", "vmodl.MethodFault[]", "sms.version.version5"]])
    create_data_type("sms.storage.BatchReturnStatus", "BatchReturnStatus", "vmodl.DynamicData", "sms.version.version5", [["uniqueId", "string", "sms.version.version5"], ["returnStatus", "sms.storage.BatchErrorResult", "sms.version.version5", {:optional => true}]])
    create_data_type("sms.storage.DatastoreBackingPoolMapping", "DatastoreBackingPoolMapping", "vmodl.DynamicData", "sms.version.version5", [["datastore", "vim.Datastore[]", "sms.version.version5"], ["backingStoragePool", "sms.storage.BackingStoragePool[]", "sms.version.version5", {:optional => true}]])
    create_data_type("sms.storage.DatastorePair", "DatastorePair", "vmodl.DynamicData", "sms.version.version3", [["datastore1", "vim.Datastore", "sms.version.version3"], ["datastore2", "vim.Datastore", "sms.version.version3"]])
    create_data_type("sms.storage.DatastoreSet", "DatastoreSet", "vmodl.DynamicData", "sms.version.version5", [["datastore", "vim.Datastore[]", "sms.version.version5"]])
    create_data_type("sms.storage.DrsMigrationCapabilityResult", "DrsMigrationCapabilityResult", "vmodl.DynamicData", "sms.version.version3", [["recommendedDatastorePair", "sms.storage.DatastorePair[]", "sms.version.version3", {:optional => true}], ["nonRecommendedDatastorePair", "sms.storage.DatastorePair[]", "sms.version.version3", {:optional => true}]])
    create_data_type("sms.storage.DrsMigrationCapabilityResultEx", "DrsMigrationCapabilityResultEx", "vmodl.DynamicData", "sms.version.version5", [["nonRecommendedDatastoreSet", "sms.storage.DatastoreSet[]", "sms.version.version5", {:optional => true}]])
    create_enum_type("sms.storage.EntityType", "SmsEntityType", "sms.version.version11", ["StorageArrayEntity", "StorageProcessorEntity", "StoragePortEntity", "StorageLunEntity", "StorageFileSystemEntity", "StorageCapabilityEntity", "CapabilitySchemaEntity", "CapabilityProfileEntity", "DefaultProfileEntity", "ResourceAssociationEntity", "StorageContainerEntity", "StorageObjectEntity", "MessageCatalogEntity", "ProtocolEndpointEntity", "VirtualVolumeInfoEntity", "BackingStoragePoolEntity", "FaultDomainEntity", "ReplicationGroupEntity"])
    create_data_type("sms.storage.FaultDomainProviderMapping", "FaultDomainProviderMapping", "vmodl.DynamicData", "sms.version.version11", [["activeProvider", "sms.provider.Provider", "sms.version.version11"], ["faultDomainId", "vim.vm.replication.FaultDomainId[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.FileSystemInfo", "StorageFileSystemInfo", "vmodl.DynamicData", "sms.version.version2", [["fileServerName", "string", "sms.version.version2"], ["fileSystemPath", "string", "sms.version.version2"], ["ipAddress", "string", "sms.version.version2", {:optional => true}]])
    create_data_type("sms.storage.LunHbaAssociation", "LunHbaAssociation", "vmodl.DynamicData", "sms.version.version2", [["canonicalName", "string", "sms.version.version2"], ["hba", "vim.host.HostBusAdapter[]", "sms.version.version2"]])
    create_data_type("sms.storage.NameValuePair", "NameValuePair", "vmodl.DynamicData", "sms.version.version11", [["parameterName", "string", "sms.version.version11"], ["parameterValue", "string", "sms.version.version11"]])
    create_data_type("sms.storage.StorageAlarm", "StorageAlarm", "vmodl.DynamicData", "sms.version.version11", [["alarmId", "long", "sms.version.version11"], ["alarmType", "string", "sms.version.version11"], ["containerId", "string", "sms.version.version11", {:optional => true}], ["objectId", "string", "sms.version.version11", {:optional => true}], ["objectType", "string", "sms.version.version11"], ["status", "string", "sms.version.version11"], ["alarmTimeStamp", "vmodl.DateTime", "sms.version.version11"], ["messageId", "string", "sms.version.version11"], ["parameterList", "sms.storage.NameValuePair[]", "sms.version.version11", {:optional => true}], ["alarmObject", "anyType", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.StorageArray", "StorageArray", "vmodl.DynamicData", "sms.version.version2", [["name", "string", "sms.version.version2"], ["uuid", "string", "sms.version.version2"], ["vendorId", "string", "sms.version.version2"], ["modelId", "string", "sms.version.version2"], ["firmware", "string", "sms.version.version2", {:optional => true}], ["alternateName", "string[]", "sms.version.version2", {:optional => true}], ["supportedBlockInterface", "string[]", "sms.version.version2", {:optional => true}], ["supportedFileSystemInterface", "string[]", "sms.version.version2", {:optional => true}], ["supportedProfile", "string[]", "sms.version.version3", {:optional => true}], ["priority", "int", "sms.version.version4", {:optional => true}]])
    create_enum_type("sms.storage.StorageArray.BlockDeviceInterface", "BlockDeviceInterface", "sms.version.version1", ["fc", "iscsi", "fcoe", "otherBlock"])
    create_enum_type("sms.storage.StorageArray.FileSystemInterface", "FileSystemInterface", "sms.version.version1", ["nfs", "otherFileSystem"])
    create_enum_type("sms.storage.StorageArray.VasaProfile", "VasaProfile", "sms.version.version3", ["blockDevice", "fileSystem", "capability", "policy", "object", "statistics", "storageDrsBlockDevice", "storageDrsFileSystem"])
    create_data_type("sms.storage.StorageCapability", "StorageCapability", "vmodl.DynamicData", "sms.version.version2", [["uuid", "string", "sms.version.version2"], ["name", "string", "sms.version.version2"], ["description", "string", "sms.version.version2"]])
    create_data_type("sms.storage.StorageContainer", "StorageContainer", "vmodl.DynamicData", "sms.version.version5", [["uuid", "string", "sms.version.version5"], ["name", "string", "sms.version.version5"], ["maxVvolSizeInMB", "long", "sms.version.version5"], ["providerId", "string[]", "sms.version.version5"], ["arrayId", "string[]", "sms.version.version5"]])
    create_data_type("sms.storage.StorageContainerResult", "StorageContainerResult", "vmodl.DynamicData", "sms.version.version5", [["storageContainer", "sms.storage.StorageContainer[]", "sms.version.version5", {:optional => true}], ["providerInfo", "sms.provider.ProviderInfo[]", "sms.version.version5", {:optional => true}]])
    create_data_type("sms.storage.StorageContainerSpec", "StorageContainerSpec", "vmodl.DynamicData", "sms.version.version5", [["containerId", "string[]", "sms.version.version5", {:optional => true}]])
    create_data_type("sms.storage.StorageFileSystem", "StorageFileSystem", "vmodl.DynamicData", "sms.version.version2", [["uuid", "string", "sms.version.version2"], ["info", "sms.storage.FileSystemInfo[]", "sms.version.version2"], ["nativeSnapshotSupported", "boolean", "sms.version.version2"], ["thinProvisioningStatus", "string", "sms.version.version2"], ["type", "string", "sms.version.version2"], ["version", "string", "sms.version.version2"], ["backingConfig", "sms.storage.BackingConfig", "sms.version.version5", {:optional => true}]])
    create_enum_type("sms.storage.StorageFileSystem.FileSystemInterfaceVersion", "FileSystemInterfaceVersion", "sms.version.version1", ["NFSV3_0"])
    create_data_type("sms.storage.StorageLun", "StorageLun", "vmodl.DynamicData", "sms.version.version2", [["uuid", "string", "sms.version.version2"], ["vSphereLunIdentifier", "string", "sms.version.version2"], ["vendorDisplayName", "string", "sms.version.version2"], ["capacityInMB", "long", "sms.version.version2"], ["usedSpaceInMB", "long", "sms.version.version2"], ["lunThinProvisioned", "boolean", "sms.version.version2"], ["alternateIdentifier", "string[]", "sms.version.version2", {:optional => true}], ["drsManagementPermitted", "boolean", "sms.version.version2"], ["thinProvisioningStatus", "string", "sms.version.version2"], ["backingConfig", "sms.storage.BackingConfig", "sms.version.version5", {:optional => true}]])
    create_data_type("sms.storage.StoragePort", "StoragePort", "vmodl.DynamicData", "sms.version.version2", [["uuid", "string", "sms.version.version2"], ["type", "string", "sms.version.version2"], ["alternateName", "string[]", "sms.version.version2", {:optional => true}]])
    create_data_type("sms.storage.StorageProcessor", "StorageProcessor", "vmodl.DynamicData", "sms.version.version2", [["uuid", "string", "sms.version.version2"], ["alternateIdentifer", "string[]", "sms.version.version2", {:optional => true}]])
    create_enum_type("sms.storage.ThinProvisioningStatus", "ThinProvisioningStatus", "sms.version.version2", ["RED", "YELLOW", "GREEN"])
    create_data_type("sms.storage.VvolRebindSpec", "VvolRebindSpec", "vmodl.DynamicData", "sms.version.version5", [["storageContainerId", "string", "sms.version.version5"], ["vvolId", "string[]", "sms.version.version5"]])
    create_data_type("sms.storage.replication.DeviceId", "DeviceId", "vmodl.DynamicData", "sms.version.version11", nil)
    create_data_type("sms.storage.replication.FailoverParam", "FailoverParam", "vmodl.DynamicData", "sms.version.version11", [["isPlanned", "boolean", "sms.version.version11"], ["checkOnly", "boolean", "sms.version.version11"], ["replicationGroupsToFailover", "sms.storage.replication.FailoverParam.ReplicationGroupData[]", "sms.version.version11", {:optional => true}], ["policyAssociations", "sms.storage.replication.FailoverParam.PolicyAssociation[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.FailoverParam.ReplicationGroupData", "ReplicationGroupData", "vmodl.DynamicData", "sms.version.version11", [["groupId", "vim.vm.replication.ReplicationGroupId", "sms.version.version11"], ["pitId", "sms.storage.replication.PointInTimeReplicaId", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.FailoverParam.PolicyAssociation", "PolicyAssociation", "vmodl.DynamicData", "sms.version.version11", [["id", "sms.storage.replication.DeviceId", "sms.version.version11"], ["policyId", "string", "sms.version.version11"], ["datastore", "vim.Datastore", "sms.version.version11"]])
    create_data_type("sms.storage.replication.FaultDomainInfo", "FaultDomainInfo", "vim.vm.replication.FaultDomainId", "sms.version.version11", [["name", "string", "sms.version.version11", {:optional => true}], ["description", "string", "sms.version.version11", {:optional => true}], ["storageArrayId", "string", "sms.version.version11", {:optional => true}], ["children", "vim.vm.replication.FaultDomainId[]", "sms.version.version11", {:optional => true}], ["provider", "sms.provider.Provider", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.GroupInfo", "GroupInfo", "vmodl.DynamicData", "sms.version.version11", [["groupId", "vim.vm.replication.ReplicationGroupId", "sms.version.version11"]])
    create_data_type("sms.storage.replication.GroupOperationResult", "GroupOperationResult", "vmodl.DynamicData", "sms.version.version11", [["groupId", "vim.vm.replication.ReplicationGroupId", "sms.version.version11"], ["warning", "vmodl.MethodFault[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.PointInTimeReplicaId", "PointInTimeReplicaId", "vmodl.DynamicData", "sms.version.version11", [["id", "string", "sms.version.version11"]])
    create_data_type("sms.storage.replication.PromoteParam", "PromoteParam", "vmodl.DynamicData", "sms.version.version11", [["isPlanned", "boolean", "sms.version.version11"], ["replicationGroupsToPromote", "vim.vm.replication.ReplicationGroupId[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.QueryPointInTimeReplicaParam", "QueryPointInTimeReplicaParam", "vmodl.DynamicData", "sms.version.version11", [["replicaTimeQueryParam", "sms.storage.replication.QueryPointInTimeReplicaParam.ReplicaQueryIntervalParam", "sms.version.version11", {:optional => true}], ["pitName", "string", "sms.version.version11", {:optional => true}], ["tags", "string[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.QueryPointInTimeReplicaParam.ReplicaQueryIntervalParam", "ReplicaQueryIntervalParam", "vmodl.DynamicData", "sms.version.version11", [["fromDate", "vmodl.DateTime", "sms.version.version11", {:optional => true}], ["toDate", "vmodl.DateTime", "sms.version.version11", {:optional => true}], ["number", "int", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.QueryPointInTimeReplicaSuccessResult", "QueryPointInTimeReplicaSuccessResult", "sms.storage.replication.GroupOperationResult", "sms.version.version11", [["replicaInfo", "sms.storage.replication.QueryPointInTimeReplicaSuccessResult.PointInTimeReplicaInfo[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.QueryPointInTimeReplicaSuccessResult.PointInTimeReplicaInfo", "PointInTimeReplicaInfo", "vmodl.DynamicData", "sms.version.version11", [["id", "sms.storage.replication.PointInTimeReplicaId", "sms.version.version11"], ["pitName", "string", "sms.version.version11"], ["timeStamp", "vmodl.DateTime", "sms.version.version11"], ["tags", "string[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.QueryPointInTimeReplicaSummaryResult", "QueryPointInTimeReplicaSummaryResult", "sms.storage.replication.GroupOperationResult", "sms.version.version11", [["intervalResults", "sms.storage.replication.QueryPointInTimeReplicaSummaryResult.ReplicaIntervalQueryResult[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.QueryPointInTimeReplicaSummaryResult.ReplicaIntervalQueryResult", "ReplicaIntervalQueryResult", "vmodl.DynamicData", "sms.version.version11", [["fromDate", "vmodl.DateTime", "sms.version.version11"], ["toDate", "vmodl.DateTime", "sms.version.version11"], ["number", "int", "sms.version.version11"]])
    create_data_type("sms.storage.replication.QueryReplicationGroupSuccessResult", "QueryReplicationGroupSuccessResult", "sms.storage.replication.GroupOperationResult", "sms.version.version11", [["rgInfo", "sms.storage.replication.GroupInfo", "sms.version.version11"]])
    create_data_type("sms.storage.replication.QueryReplicationPeerResult", "QueryReplicationPeerResult", "vmodl.DynamicData", "sms.version.version11", [["sourceDomain", "vim.vm.replication.FaultDomainId", "sms.version.version11"], ["targetDomain", "vim.vm.replication.FaultDomainId[]", "sms.version.version11", {:optional => true}], ["error", "vmodl.MethodFault[]", "sms.version.version11", {:optional => true}], ["warning", "vmodl.MethodFault[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.ReplicaId", "ReplicaId", "vmodl.DynamicData", "sms.version.version11", [["id", "string", "sms.version.version11"]])
    create_enum_type("sms.storage.replication.ReplicationState", "ReplicationReplicationState", "sms.version.version11", ["SOURCE", "TARGET", "FAILEDOVER", "INTEST", "REMOTE_FAILEDOVER"])
    create_data_type("sms.storage.replication.ReverseReplicationSuccessResult", "ReverseReplicationSuccessResult", "sms.storage.replication.GroupOperationResult", "sms.version.version11", [["newGroupId", "vim.vm.replication.DeviceGroupId", "sms.version.version11"]])
    create_data_type("sms.storage.replication.SourceGroupInfo", "SourceGroupInfo", "sms.storage.replication.GroupInfo", "sms.version.version11", [["name", "string", "sms.version.version11", {:optional => true}], ["description", "string", "sms.version.version11", {:optional => true}], ["state", "string", "sms.version.version11"], ["replica", "sms.storage.replication.SourceGroupInfo.ReplicationTargetInfo[]", "sms.version.version11", {:optional => true}], ["memberInfo", "sms.storage.replication.SourceGroupMemberInfo[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.SourceGroupInfo.ReplicationTargetInfo", "ReplicationTargetInfo", "vmodl.DynamicData", "sms.version.version11", [["targetGroupId", "vim.vm.replication.ReplicationGroupId", "sms.version.version11"], ["replicationAgreementDescription", "string", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.SourceGroupMemberInfo", "SourceGroupMemberInfo", "vmodl.DynamicData", "sms.version.version11", [["deviceId", "sms.storage.replication.DeviceId", "sms.version.version11"], ["targetId", "sms.storage.replication.SourceGroupMemberInfo.TargetDeviceId[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.SourceGroupMemberInfo.TargetDeviceId", "TargetDeviceId", "vmodl.DynamicData", "sms.version.version11", [["domainId", "vim.vm.replication.FaultDomainId", "sms.version.version11"], ["deviceId", "sms.storage.replication.ReplicaId", "sms.version.version11"]])
    create_data_type("sms.storage.replication.SyncReplicationGroupSuccessResult", "SyncReplicationGroupSuccessResult", "sms.storage.replication.GroupOperationResult", "sms.version.version11", [["timeStamp", "vmodl.DateTime", "sms.version.version11"], ["pitId", "sms.storage.replication.PointInTimeReplicaId", "sms.version.version11", {:optional => true}], ["pitName", "string", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.TargetGroupInfo", "TargetGroupInfo", "sms.storage.replication.GroupInfo", "sms.version.version11", [["sourceInfo", "sms.storage.replication.TargetGroupInfo.TargetToSourceInfo", "sms.version.version11"], ["state", "string", "sms.version.version11"], ["devices", "sms.storage.replication.TargetGroupMemberInfo[]", "sms.version.version11", {:optional => true}], ["isPromoteCapable", "boolean", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.TargetGroupInfo.TargetToSourceInfo", "TargetToSourceInfo", "vmodl.DynamicData", "sms.version.version11", [["sourceGroupId", "vim.vm.replication.ReplicationGroupId", "sms.version.version11"], ["replicationAgreementDescription", "string", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.TargetGroupMemberInfo", "TargetGroupMemberInfo", "vmodl.DynamicData", "sms.version.version11", [["replicaId", "sms.storage.replication.ReplicaId", "sms.version.version11"], ["sourceId", "sms.storage.replication.DeviceId", "sms.version.version11"], ["targetDatastore", "vim.Datastore", "sms.version.version11"]])
    create_data_type("sms.storage.replication.TestFailoverParam", "TestFailoverParam", "sms.storage.replication.FailoverParam", "sms.version.version11", nil)
    create_data_type("sms.storage.replication.VVolId", "VVolId", "sms.storage.replication.DeviceId", "sms.version.version11", [["id", "string", "sms.version.version11"]])
    create_data_type("sms.storage.replication.VirtualDiskId", "VasaVirtualDiskId", "sms.storage.replication.DeviceId", "sms.version.version11", [["diskId", "string", "sms.version.version11"]])
    create_data_type("sms.storage.replication.VirtualDiskKey", "VirtualDiskKey", "sms.storage.replication.DeviceId", "sms.version.version11", [["vmInstanceUUID", "string", "sms.version.version11"], ["deviceKey", "int", "sms.version.version11"]])
    create_data_type("sms.storage.replication.VirtualMachineId", "VirtualMachineId", "sms.storage.replication.DeviceId", "sms.version.version11", nil)
    create_data_type("sms.storage.replication.VirtualMachineUUID", "VirtualMachineUUID", "sms.storage.replication.VirtualMachineId", "sms.version.version11", [["vmInstanceUUID", "string", "sms.version.version11"]])
    create_data_type("sms.fault.CertificateAuthorityFault", "CertificateAuthorityFault", "sms.fault.ProviderRegistrationFault", "sms.version.version5", [["faultCode", "int", "sms.version.version5"]])
    create_data_type("sms.fault.CertificateNotImported", "CertificateNotImported", "sms.fault.ProviderRegistrationFault", "sms.version.version5", nil)
    create_data_type("sms.fault.CertificateNotTrusted", "CertificateNotTrusted", "sms.fault.ProviderRegistrationFault", "sms.version.version2", [["certificate", "string", "sms.version.version2"]])
    create_data_type("sms.fault.IncorrectUsernamePassword", "IncorrectUsernamePassword", "sms.fault.ProviderRegistrationFault", "sms.version.version2", nil)
    create_data_type("sms.fault.InvalidCertificate", "InvalidCertificate", "sms.fault.ProviderRegistrationFault", "sms.version.version4", [["certificate", "string", "sms.version.version4"]])
    create_data_type("sms.fault.InvalidUrl", "InvalidUrl", "sms.fault.ProviderRegistrationFault", "sms.version.version4", [["url", "string", "sms.version.version4"]])
    create_data_type("sms.fault.NoCommonProviderForAllBackings", "NoCommonProviderForAllBackings", "sms.fault.QueryExecutionFault", "sms.version.version2", nil)
    create_data_type("sms.fault.ProviderNotFound", "ProviderNotFound", "sms.fault.QueryExecutionFault", "sms.version.version2", nil)
    create_data_type("sms.fault.VmscProfileNotSupported", "VmscProfileNotSupported", "sms.fault.VvolRebindFault", "sms.version.version5", nil)
    create_data_type("sms.fault.replication.AlreadyDone", "AlreadyDone", "sms.fault.replication.ReplicationFault", "sms.version.version11", nil)
    create_data_type("sms.fault.replication.InvalidFunctionTarget", "InvalidFunctionTarget", "sms.fault.replication.ReplicationFault", "sms.version.version11", nil)
    create_data_type("sms.fault.replication.InvalidReplicationState", "InvalidReplicationState", "sms.fault.replication.ReplicationFault", "sms.version.version11", [["desiredState", "string[]", "sms.version.version11", {:optional => true}], ["currentState", "string", "sms.version.version11"]])
    create_data_type("sms.fault.replication.NoReplicationTarget", "NoReplicationTarget", "sms.fault.replication.ReplicationFault", "sms.version.version11", nil)
    create_data_type("sms.fault.replication.NoValidReplica", "NoValidReplica", "sms.fault.replication.ReplicationFault", "sms.version.version11", [["deviceId", "sms.storage.replication.DeviceId", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.fault.replication.PeerNotReachable", "PeerNotReachable", "sms.fault.replication.ReplicationFault", "sms.version.version11", nil)
    create_data_type("sms.storage.FcStoragePort", "FcStoragePort", "sms.storage.StoragePort", "sms.version.version2", [["portWwn", "string", "sms.version.version2"], ["nodeWwn", "string", "sms.version.version2"]])
    create_data_type("sms.storage.FcoeStoragePort", "FcoeStoragePort", "sms.storage.StoragePort", "sms.version.version2", [["portWwn", "string", "sms.version.version2"], ["nodeWwn", "string", "sms.version.version2"]])
    create_data_type("sms.storage.IscsiStoragePort", "IscsiStoragePort", "sms.storage.StoragePort", "sms.version.version2", [["identifier", "string", "sms.version.version2"]])
    create_data_type("sms.storage.replication.FailoverSuccessResult", "FailoverSuccessResult", "sms.storage.replication.GroupOperationResult", "sms.version.version11", [["newState", "string", "sms.version.version11"], ["pitId", "sms.storage.replication.PointInTimeReplicaId", "sms.version.version11", {:optional => true}], ["pitIdBeforeFailover", "sms.storage.replication.PointInTimeReplicaId", "sms.version.version11", {:optional => true}], ["recoveredDeviceInfo", "sms.storage.replication.FailoverSuccessResult.RecoveredDevice[]", "sms.version.version11", {:optional => true}], ["timeStamp", "vmodl.DateTime", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.FailoverSuccessResult.RecoveredDiskInfo", "RecoveredDiskInfo", "vmodl.DynamicData", "sms.version.version11", [["deviceKey", "int", "sms.version.version11"], ["dsUrl", "string", "sms.version.version11"], ["diskPath", "string", "sms.version.version11"]])
    create_data_type("sms.storage.replication.FailoverSuccessResult.RecoveredDevice", "RecoveredDevice", "vmodl.DynamicData", "sms.version.version11", [["targetDeviceId", "sms.storage.replication.ReplicaId", "sms.version.version11", {:optional => true}], ["recoveredDeviceId", "sms.storage.replication.DeviceId", "sms.version.version11", {:optional => true}], ["sourceDeviceId", "sms.storage.replication.DeviceId", "sms.version.version11"], ["info", "string[]", "sms.version.version11", {:optional => true}], ["datastore", "vim.Datastore", "sms.version.version11"], ["recoveredDiskInfo", "sms.storage.replication.FailoverSuccessResult.RecoveredDiskInfo[]", "sms.version.version11", {:optional => true}], ["error", "vmodl.MethodFault", "sms.version.version11", {:optional => true}], ["warnings", "vmodl.MethodFault[]", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.GroupErrorResult", "GroupErrorResult", "sms.storage.replication.GroupOperationResult", "sms.version.version11", [["error", "vmodl.MethodFault[]", "sms.version.version11"]])
    create_data_type("sms.storage.replication.RecoveredTargetGroupMemberInfo", "RecoveredTargetGroupMemberInfo", "sms.storage.replication.TargetGroupMemberInfo", "sms.version.version11", [["recoveredDeviceId", "sms.storage.replication.DeviceId", "sms.version.version11", {:optional => true}]])
    create_data_type("sms.storage.replication.VirtualMachineFilePath", "VirtualMachineFilePath", "sms.storage.replication.VirtualMachineId", "sms.version.version11", [["vcUuid", "string", "sms.version.version11", {:optional => true}], ["dsUrl", "string", "sms.version.version11"], ["vmxPath", "string", "sms.version.version11"]])
  end
end

